let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s else assoc d k t
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?b * _ * _) ~~~>  ((?b * _ * _) -> ?c) ---> (?assoc) ---> (?b -> ?a)  ~~~> (?b) ---> (?c) ~~~> ((?b * _ * _) -> ?c) ---> (?assoc) ---> (?b -> ?a)  ~~~> (?a) ---> (_ -> _)
//│ 
//│ ◉ (?b * _ * _) comes from
//│    - l.1  let rec assoc (d,k,l) =
//│                         ^^^^^^^
//│   ◉ ((?b * _ * _) -> ?c) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?b -> ?a) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s else assoc d k t
//│                                                               ^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?b * _ * _) -> ?c) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?b -> ?a) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s else assoc d k t
//│                                                               ^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s else assoc d k t
//│ │                                                           ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s else assoc d k t
//│                                                             ^^^^^^^
//│ U max: 10, total: 34
//│ UERR 1 errors
//│ L: 1 [([α43'], [α44'], [α45'],) ~ ([α44'] -> α54'), [([α43'], [α44'], [α45'],) - (([α43'], [α44'], [α45'],) -> α46') ~ ([α43'] -> α53') - α43', L: 0 [(([α43'], [α44'], [α45'],) -> α46') ~ ([α43'] -> α53'), (([α43'], [α44'], [α45'],) -> α46') <: assoc42', assoc42' <: ([α43'] -> α53')]], α43' <: α46', [α46' - (([α43'], [α44'], [α45'],) -> α46') ~ ([α43'] -> α53') - α53', L: 0 [(([α43'], [α44'], [α45'],) -> α46') ~ ([α43'] -> α53'), (([α43'], [α44'], [α45'],) -> α46') <: assoc42', assoc42' <: ([α43'] -> α53')]], α53' <: ([α44'] -> α54')]

