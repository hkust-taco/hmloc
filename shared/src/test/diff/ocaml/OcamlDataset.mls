:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?b) ~~~> (?b -> _ -> ?b) <--- (?a -> _ -> _)  ~~~> (?a) ~~~> (?a -> _ -> _) ---> (?b -> _ -> ?b)  <~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?b -> _ -> ?b) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?a -> _ -> _) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.13     let f a x = padZero l1 l2 in
//│                     ^
//│   ◉ (?a -> _ -> _) comes from
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?b) <~~~ (_ -> ?b) <~~~  (?b -> _ -> ?b) <--- (_ -> _ -> ?a)  <~~~ (_ -> ?a)  <~~~ (?a) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?b -> _ -> ?b) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) comes from
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?c) <~~~ (_ -> ?c) <~~~  (?c -> _ -> ?c) <--- (_ -> _ -> ?b)  <~~~ (_ -> ?b)  <~~~ (?b) <--- (?a) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> _ -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?c) <~~~ (_ -> ?c) <~~~  (?c -> _ -> ?c) <--- (_ -> _ -> ?b)  <~~~ (_ -> ?b)  <~~~ (?b) <--- (?a) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> _ -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?c) <~~~ (_ -> ?c) <~~~  (?c -> _ -> ?c) <--- (_ -> _ -> ?b)  <~~~ (_ -> ?b)  <~~~ (?b) <--- (?a) ---> (?b) ~~~> (_ -> ?b) ~~~>  (_ -> _ -> ?b) ---> (?c -> _ -> ?c)  ~~~> (_ -> ?c)  ~~~> (?c) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> _ -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?c -> _ -> ?c) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a], list['a0]
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 33, total: 666
//│ UERR 6 errors
//│ L: 1 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - α208'', L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]], [α208'' - (α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')) - α206'', L: 0 [(α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')), (α208'' -> (α209'' -> [α158''])) <: (α206'' -> (α207'' -> α206''))]], α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[α151'']], [[α154'']],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' :> ([[α151'']], [[α154'']],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' <: α158'', [α158'' - (α209'' -> [α158'']) ~ (α207'' -> α206'') - α206'', L: 1 [(α209'' -> [α158'']) ~ (α207'' -> α206''), [(α209'' -> [α158'']) - (α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')) - (α207'' -> α206''), L: 0 [(α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')), (α208'' -> (α209'' -> [α158''])) <: (α206'' -> (α207'' -> α206''))]]]], α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[α151'']], [[list[α155'']]],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' :> ([[α151'']], [[list[α155'']]],)]
//│ L: 0 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[list[α152'']]], [[α154'']],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> ([[list[α152'']]], [[α154'']],)]


type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) comes from
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) comes from
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float, float,) -> float
//│ U max: 14, total: 193
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]


let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?b) ~~~> (?f -> ?b) ~~~>  (_ -> ?f -> ?b) ---> (?c -> ?d -> ?c)  ~~~> (?d -> ?c)  ~~~> (?c) <--- (?e) <~~~ (?e list) <--- (?a) ---> (?d list)  ~~~> (?d) <~~~ (?d -> ?c) <~~~  (?c -> ?d -> ?c) <--- (_ -> ?f -> ?b)  <~~~ (?f -> ?b)  ~~~> (?f) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?f -> ?b) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f -> ?b) comes from
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) comes from
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> ?d -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?f -> ?b) comes from
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?f -> ?b) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a374'], int <: α375', [α375' - (α373' -> α375') ~ (α371' -> α370') - α370', L: 1 [(α373' -> α375') ~ (α371' -> α370'), [(α373' -> α375') - (α372' -> (α373' -> α375')) ~ (α370' -> (α371' -> α370')) - (α371' -> α370'), L: 0 [(α372' -> (α373' -> α375')) ~ (α370' -> (α371' -> α370')), (α372' -> (α373' -> α375')) <: (α370' -> (α371' -> α370'))]]]], α370' :> α369', [α369' - list[α369'] ~ list[α371'] - α371', L: 0 [list[α369'] ~ list[α371'], list[α369'] :> α364', α364' <: list[α371']]], [α371' - (α371' -> α370') ~ (α373' -> α375') - α373', L: 1 [(α371' -> α370') ~ (α373' -> α375'), [(α371' -> α370') - (α370' -> (α371' -> α370')) ~ (α372' -> (α373' -> α375')) - (α373' -> α375'), L: 0 [(α370' -> (α371' -> α370')) ~ (α372' -> (α373' -> α375')), (α370' -> (α371' -> α370')) :> (α372' -> (α373' -> α375'))]]]], α373' <: list['a374']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ [ERROR] Type `_ list` does not match `(_ -> _) -> _ list -> _ list`
//│ 
//│         (_ list) <--- (?b) <~~~ (?b -> _) ~~~>  (_ -> ?b -> _) ---> (?sepConcat) ---> (string -> ?a)  ~~~> (?a) ---> (((_ -> _) -> _ list -> _ list) -> _)  <~~~ ((_ -> _) -> _ list -> _ list)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - l.3    | [] -> ""
//│ │             ^^
//│ │  - l.2    match sl with
//│ │                 ^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.1  let rec sepConcat sep sl =
//│                                 ^^
//│   ◉ (?b -> _) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?a) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> _) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ ((_ -> _) -> _ list -> _ list) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                                         ^^^^^^^^
//│    - lib. let List.map: ('a -> 'b) -> 'a list -> 'b list
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `string` does not match `(_ * _) -> _`
//│ 
//│         (string) <--- (?a) <~~~ (?a -> _ -> string) ---> (?b -> _ -> ?b)  <~~~ (?b) ---> (?e) ~~~> (_ -> ?e) ~~~>  (_ -> _ -> ?e) ---> (?sepConcat) ---> (string -> ?d)  ~~~> (?d) ---> (((_ -> _) -> _ list -> _ list) -> ?c)  ~~~> (?c) ---> ((_ * _) -> _)
//│ 
//│ ◉ (string) comes from
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^^^^
//│ │  - l.5        let f a x = a ^ (sep ^ x) in
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.5        let f a x = a ^ (sep ^ x) in
//│                       ^
//│   ◉ (?a -> _ -> string) comes from
//│   │  - l.5        let f a x = a ^ (sep ^ x) in
//│   │                     ^^^^^^^^^^^^^^^^^^^
//│   │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│   │                                                           ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│ │                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.2    match sl with
//│             ^^^^^^^^^^^^^
//│             | [] -> "" ...
//│             ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?e) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?d) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> ?c) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: 'a -> 'b -> string
//│ U max: 7, total: 76
//│ UERR 2 errors
//│ L: 2 [list['a394'] ~ ((α401' -> α402') -> (list[α401'] -> list[α402'])), list['a394'] :> α393', [α393' - (α393' -> α399') ~ ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403') - ((α401' -> α402') -> (list[α401'] -> list[α402'])), L: 1 [(α393' -> α399') ~ ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403'), [(α393' -> α399') - (α392' -> (α393' -> α399')) ~ ([string] -> α400') - α400', L: 0 [(α392' -> (α393' -> α399')) ~ ([string] -> α400'), (α392' -> (α393' -> α399')) <: sepConcat391', sepConcat391' <: ([string] -> α400')]], α400' <: ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403')]]]
//│ L: 2 [string ~ (([[α389']], [[α390']],) -> α404'), string :> α398', [α398' - (α398' -> (α396' -> [string])) ~ (α397' -> (α395' -> α397')) - α397', L: 0 [(α398' -> (α396' -> [string])) ~ (α397' -> (α395' -> α397')), (α398' -> (α396' -> [string])) <: (α397' -> (α395' -> α397'))]], α397' <: α399', [α399' - (α393' -> α399') ~ ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403') - α403', L: 1 [(α393' -> α399') ~ ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403'), [(α393' -> α399') - (α392' -> (α393' -> α399')) ~ ([string] -> α400') - α400', L: 0 [(α392' -> (α393' -> α399')) ~ ([string] -> α400'), (α392' -> (α393' -> α399')) <: sepConcat391', sepConcat391' <: ([string] -> α400')]], α400' <: ([((α401' -> α402') -> (list[α401'] -> list[α402']))] -> α403')]], α403' <: (([[α389']], [[α390']],) -> α404')]

// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~>  (_ list -> _) <--- (?c) <~~~ (int -> ?c) <--- (?sumListHelper) ---> (int -> ?a)  ~~~> (?a) ---> (?b -> _)  (?b) <~~~ (?b -> _) ---> (?sumList) ---> (?digitsOfInt -> _)  <~~~ (?digitsOfInt) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                                                  ^^^^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?c) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                                ^^
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                           ^^
//│   ◉ (?b -> _) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt -> _) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?digitsOfInt) is assumed for
//│ ▲  - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│ │                 ^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ~~~>  (int -> ?e) <--- (?sumListHelper) <--- (?a -> _ -> ?b)  ~~~> (?a) ---> (?b) <--- (?d) <~~~ (_ list -> ?d) <--- (?g) <~~~ (int -> ?g) <--- (?sumListHelper) ---> (int -> ?e)  ~~~> (?e) ---> (_ -> ?c)  ~~~> (?c) <~~~ (_ -> ?c) ---> (?sumList) ---> (_ -> ?f)  ~~~> (?f) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                              ^
//│   ◉ (int -> ?e) comes from
//│   ▲  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^
//│   │  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?sumListHelper) is assumed for
//│   ▲  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a -> _ -> ?b) comes from
//│      - l.1  let rec sumListHelper total xs =
//│                                   ^^^^^^^^^^
//│               match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.1  let rec sumListHelper total xs =
//│ │                               ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │                                 ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ list -> ?d) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?g) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?e) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?e) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?f) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?f) is assumed for
//│ │  - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│ │                                         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                           ^^^^^^^^^^^^^^^^^^^
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: 'a -> 'b
//│ U max: 28, total: 273
//│ UERR 2 errors
//│ L: 2 [int ~ ([α460'] -> α489'), [int - ([int] -> α470') ~ (α466' -> (α463' -> α464')) - α466', L: 0 [([int] -> α470') ~ (α466' -> (α463' -> α464')), ([int] -> α470') :> sumListHelper471', sumListHelper471' :> (α466' -> (α463' -> α464'))]], α466' <: α464', α464' :> α467', [α467' - ([list['a468']] -> α467') ~ ([α462'] -> α465') - α465', L: 1 [([list['a468']] -> α467') ~ ([α462'] -> α465'), ([list['a468']] -> α467') :> α469', [α469' - ([int] -> α469') ~ ([int] -> α470') - α470', L: 0 [([int] -> α469') ~ ([int] -> α470'), ([int] -> α469') :> sumListHelper471', sumListHelper471' <: ([int] -> α470')]], α470' <: ([α462'] -> α465')]], [α465' - (α462' -> α465') ~ ([digitsOfInt472'] -> α488') - α488', L: 0 [(α462' -> α465') ~ ([digitsOfInt472'] -> α488'), (α462' -> α465') <: sumList461', sumList461' <: ([digitsOfInt472'] -> α488')]], α488' <: ([α460'] -> α489')]
//│ L: 2 [list['a468'] ~ (α473' -> α484'), [list['a468'] - ([list['a468']] -> α467') ~ ([α462'] -> α465') - α462', L: 1 [([list['a468']] -> α467') ~ ([α462'] -> α465'), ([list['a468']] -> α467') :> α469', [α469' - ([int] -> α469') ~ ([int] -> α470') - α470', L: 0 [([int] -> α469') ~ ([int] -> α470'), ([int] -> α469') :> sumListHelper471', sumListHelper471' <: ([int] -> α470')]], α470' <: ([α462'] -> α465')]], [α462' - (α462' -> α465') ~ ([digitsOfInt472'] -> α488') - digitsOfInt472', L: 0 [(α462' -> α465') ~ ([digitsOfInt472'] -> α488'), (α462' -> α465') <: sumList461', sumList461' <: ([digitsOfInt472'] -> α488')]], digitsOfInt472' :> (α473' -> α484')]

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.728:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.730:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: 'a -> bool
//│ U max: 20, total: 272
//│ UERR 2 errors
//│ L: 0 [err ~ ([α536'] -> α537'), err <: ([α536'] -> α537')]
//│ L: 0 [err ~ ([α536'] -> α557'), err <: ([α536'] -> α557')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ [ERROR] Type `err` does not match `_ list -> _`
//│ 
//│         (err) ---> (_ list -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                                                     ^^
//│ ▼ 
//│ ◉ (_ list -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                                                       ^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	                                            ^^
//│ explode: 'b -> list['a]
//│ U max: 7, total: 73
//│ UERR 2 errors
//│ L: 0 [err ~ ([α597'] -> α601''), err <: ([α597'] -> α601'')]
//│ L: 0 [err ~ ([list['a605'']] -> α607''), err <: ([list['a605'']] -> α607'')]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.818:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 6, total: 137
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α677', α677' <: α667', α667' :> int]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) -> _` does not match `expr`
//│ 
//│         ((_ * _) -> _) ---> (?build) ---> (?b) <--- (?build) ---> (?a) ---> (expr)
//│ 
//│ ◉ ((_ * _) -> _) comes from
//│ │  - l.5  let rec build (rand,depth) =
//│ │                       ^^^^^^^^^^^^^^
//│ │           let r = rand 0.4 in ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.11       then buildSine build (rand, (d - 1))
//│ │                              ^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                                ^
//│ ▼ 
//│ ◉ (expr) comes from
//│    - l.-584  | Sine of expr
//│                        ^^^^
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ build: 'build
//│   where
//│     'build = (float -> int, int,) -> () -> expr, expr
//│ U max: 3, total: 31
//│ UERR 3 errors
//│ L: 0 [(([α683'], [α684'],) -> α686') ~ expr, (([α683'], [α684'],) -> α686') <: build682', build682' <: α693', α693' :> build682', build682' <: α691', α691' <: expr]
//│ L: 0 [expr ~ (([[α683']], [[int]],) -> α692'), expr <: (([[α683']], [[int]],) -> α692')]
//│ L: 0 [expr ~ (([[α683']], [[int]],) -> α694'), expr <: (([[α683']], [[int]],) -> α694')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) comes from
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 7, total: 85
//│ UERR 2 errors
//│ L: 0 [list['a723'] ~ int, list['a723'] <: α718', α718' <: int]
//│ L: 0 [(α720' -> [(list[α721'] -> list[α722'])]) ~ int, (α720' -> [(list[α721'] -> list[α722'])]) <: α717', α717' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?e) ~~~> (_ -> ?e) ~~~>  (_ -> _ -> ?e) ---> (?clone) ---> (_ -> ?d)  ~~~> (?d) ---> (int -> ?c)  ~~~> (?c) ~~~> (int -> ?c) <--- (?d) <~~~ (_ -> ?d) <--- (?clone) ---> (int -> ?a)  ~~~> (?a) <~~~ (int -> ?a) <--- (?clone) <--- (_ -> _ -> ?e)  <~~~ (_ -> ?e)  <~~~ (?e) <~~~ (_ -> ?e) ~~~>  (_ -> _ -> ?e) ---> (?clone) ---> (int -> ?a)  (?a) ~~~> (int -> ?a) <--- (?clone) ---> (_ -> ?d)  ~~~> (?d) ---> (int -> ?c)  ~~~> (?c) ~~~> (int -> ?c) <--- (?d) <~~~ (_ -> ?d) <--- (?clone) ---> (int -> ?a)  ~~~> (?a) ---> (int -> ?b)  ~~~> (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?e) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?e) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?e) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?e) ~~~> (_ -> ?e) ~~~>  (_ -> _ -> ?e) ---> (?clone) ---> (_ -> ?d)  ~~~> (?d) ---> (int -> ?c)  ~~~> (?c) ~~~> (int -> ?c) <--- (?d) <~~~ (_ -> ?d) <--- (?clone) ---> (int -> ?a)  ~~~> (?a) <~~~ (int -> ?a) <--- (?clone) <--- (_ -> _ -> ?e)  <~~~ (_ -> ?e)  <~~~ (?e) <~~~ (_ -> ?e) ~~~>  (_ -> _ -> ?e) ---> (?clone) ---> (int -> ?a)  (?a) ~~~> (int -> ?a) <--- (?clone) ---> (_ -> ?d)  ~~~> (?d) ---> (int -> ?c)  ~~~> (?c) ~~~> (int -> ?c) <--- (?d) <~~~ (_ -> ?d) <--- (?clone) ---> (int -> ?a)  ~~~> (?a) ---> (int -> ?b)  ~~~> (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                                                       ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?e) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?e) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?e) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a]
//│ padLength: list['a] -> list['b] -> int
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 11, total: 195
//│ UERR 2 errors
//│ L: 2 [list['a776'] ~ ([α752'] -> α788'), list['a776'] <: α777', [α777' - (α779' -> α777') ~ ([int] -> α778') - α778', L: 1 [(α779' -> α777') ~ ([int] -> α778'), [(α779' -> α777') - (α774' -> (α779' -> α777')) ~ ([α774'] -> α780') - α780', L: 0 [(α774' -> (α779' -> α777')) ~ ([α774'] -> α780'), (α774' -> (α779' -> α777')) <: clone773', clone773' <: ([α774'] -> α780')]], α780' <: ([int] -> α778')]], [α778' - ([int] -> α778') ~ (α779' -> α777') - α777', L: 1 [([int] -> α778') ~ (α779' -> α777'), ([int] -> α778') :> α780', [α780' - ([α774'] -> α780') ~ ([int] -> α782') - α782', L: 0 [([α774'] -> α780') ~ ([int] -> α782'), ([α774'] -> α780') :> clone773', clone773' <: ([int] -> α782')]], [α782' - ([int] -> α782') ~ (α774' -> (α779' -> α777')) - (α779' -> α777'), L: 0 [([int] -> α782') ~ (α774' -> (α779' -> α777')), ([int] -> α782') :> clone773', clone773' :> (α774' -> (α779' -> α777'))]]]], [α777' - (α779' -> α777') ~ ([int] -> α778') - α778', L: 1 [(α779' -> α777') ~ ([int] -> α778'), [(α779' -> α777') - (α774' -> (α779' -> α777')) ~ ([int] -> α782') - α782', L: 0 [(α774' -> (α779' -> α777')) ~ ([int] -> α782'), (α774' -> (α779' -> α777')) <: clone773', clone773' <: ([int] -> α782')]], [α782' - ([int] -> α782') ~ ([α774'] -> α780') - α780', L: 0 [([int] -> α782') ~ ([α774'] -> α780'), ([int] -> α782') :> clone773', clone773' <: ([α774'] -> α780')]], α780' <: ([int] -> α778')]], [α778' - ([int] -> α778') ~ ([[int]] -> α787') - α787', L: 1 [([int] -> α778') ~ ([[int]] -> α787'), ([int] -> α778') :> α780', [α780' - ([α774'] -> α780') ~ ([int] -> α782') - α782', L: 0 [([α774'] -> α780') ~ ([int] -> α782'), ([α774'] -> α780') :> clone773', clone773' <: ([int] -> α782')]], α782' <: ([[int]] -> α787')]], α787' <: ([α752'] -> α788')]
//│ L: 2 [list['a775'] ~ ([α752'] -> α788'), list['a775'] <: α777', [α777' - (α779' -> α777') ~ ([int] -> α778') - α778', L: 1 [(α779' -> α777') ~ ([int] -> α778'), [(α779' -> α777') - (α774' -> (α779' -> α777')) ~ ([α774'] -> α780') - α780', L: 0 [(α774' -> (α779' -> α777')) ~ ([α774'] -> α780'), (α774' -> (α779' -> α777')) <: clone773', clone773' <: ([α774'] -> α780')]], α780' <: ([int] -> α778')]], [α778' - ([int] -> α778') ~ (α779' -> α777') - α777', L: 1 [([int] -> α778') ~ (α779' -> α777'), ([int] -> α778') :> α780', [α780' - ([α774'] -> α780') ~ ([int] -> α782') - α782', L: 0 [([α774'] -> α780') ~ ([int] -> α782'), ([α774'] -> α780') :> clone773', clone773' <: ([int] -> α782')]], [α782' - ([int] -> α782') ~ (α774' -> (α779' -> α777')) - (α779' -> α777'), L: 0 [([int] -> α782') ~ (α774' -> (α779' -> α777')), ([int] -> α782') :> clone773', clone773' :> (α774' -> (α779' -> α777'))]]]], [α777' - (α779' -> α777') ~ ([int] -> α778') - α778', L: 1 [(α779' -> α777') ~ ([int] -> α778'), [(α779' -> α777') - (α774' -> (α779' -> α777')) ~ ([int] -> α782') - α782', L: 0 [(α774' -> (α779' -> α777')) ~ ([int] -> α782'), (α774' -> (α779' -> α777')) <: clone773', clone773' <: ([int] -> α782')]], [α782' - ([int] -> α782') ~ ([α774'] -> α780') - α780', L: 0 [([int] -> α782') ~ ([α774'] -> α780'), ([int] -> α782') :> clone773', clone773' <: ([α774'] -> α780')]], α780' <: ([int] -> α778')]], [α778' - ([int] -> α778') ~ ([[int]] -> α787') - α787', L: 1 [([int] -> α778') ~ ([[int]] -> α787'), ([int] -> α778') :> α780', [α780' - ([α774'] -> α780') ~ ([int] -> α782') - α782', L: 0 [([α774'] -> α780') ~ ([int] -> α782'), ([α774'] -> α780') :> clone773', clone773' <: ([int] -> α782')]], α782' <: ([[int]] -> α787')]], α787' <: ([α752'] -> α788')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                            ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?d) ~~~> (?d * _ list) ---> (?a) ---> (?e) ---> (?c * _)  ~~~> (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1361    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?d) ~~~> (?d * _ list) ---> (?a) ---> (?f) ---> (?c * _)  ~~~> (?c) ---> (?e) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?d) ~~~> (?d * _ list) ---> (?a) ---> (?e) ---> (?c * _)  ~~~> (?c) ~~~> (?c * _) <--- (?e) <--- (_ list * _)  <~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?c * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?g) ~~~> (?g * _ list) ---> (?a) ---> (?f) ---> (?d * _)  ~~~> (?d) ---> (?e) ~~~> (?e * _) ---> (?c) ---> (?h) <--- (_ list * _)  <~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?g) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?g * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?e * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?d) ~~~> (?d * _ list) ---> (?a) ---> (?e) ---> (?c * _)  ~~~> (?c) ~~~> (?c * _) <--- (?e) <--- (?a) <--- (?d * _ list)  <~~~ (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?c * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d * _ list) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?a)  <~~~ (_ -> ?a)  <~~~ (?a) <--- (?c) <--- (?b) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?d -> _ -> ?d) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1364let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?a)  <~~~ (_ -> ?a)  <~~~ (?a) <--- (?c) <--- (?b) <--- (_ list)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?d -> _ -> ?d) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?b) ---> (?c) ---> (?a) ~~~> (_ -> ?a) ~~~>  (_ -> _ -> ?a) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~>  (_ list -> _) <--- (?a) <~~~ (_ -> ?a) <--- (?mulByDigit) ---> (_ -> ?b)  ~~~> (?b) ---> (?c -> _)  <~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                                        ^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?a) comes from
//│     ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?b) ---> (?c) ---> (?a) ~~~> (_ -> ?a) ~~~>  (_ -> _ -> ?a) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) <--- (?c) <~~~ (?c -> _) ~~~>  (_ -> ?c -> _) ---> (?mulByDigit) ---> (_ -> ?a)  ~~~> (?a) ---> (?b -> _)  <~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - lib. let List.rev: 'a list -> 'a list
//│ │                       ^^^^^^^
//│ │  - l.-397  match List.rev l with
//│ │                           ^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.-398let rec mulByDigit i l =
//│                                 ^
//│   ◉ (?c -> _) comes from
//│      - l.-398let rec mulByDigit i l =
//│                                   ^^^
//│                match List.rev l with ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?c -> _) comes from
//│     │  - l.-398let rec mulByDigit i l =
//│     │                             ^^^^^
//│     │            match List.rev l with ...
//│     │            ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?c) ---> (?d) ---> (?a) ~~~> (_ -> ?a) ~~~>  (?b -> _ -> ?a) ---> (?e -> _ -> ?e)  ~~~> (_ -> ?e)  ~~~> (?e) ~~~> (?e -> _ -> ?e) <--- (?b -> _ -> ?a)  ~~~> (?b) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?b -> _ -> ?a) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?b -> _ -> ?a) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?c) ---> (?d) ---> (?a) ~~~> (_ -> ?a) ~~~>  (?b -> _ -> ?a) ---> (?e -> _ -> ?e)  ~~~> (_ -> ?e)  ~~~> (?e) ~~~> (?e -> _ -> ?e) <--- (?b -> _ -> ?a)  ~~~> (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?b -> _ -> ?a) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?b -> _ -> ?a) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?b) ---> (?c) ---> (?a) ~~~> (_ -> ?a) ~~~>  (_ -> _ -> ?a) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ~~~> (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?a)  <~~~ (_ -> ?a)  <~~~ (?a) <--- (?c) <--- (?b) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?d -> _ -> ?d) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1364let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?h) ~~~> (?h * _ list) ---> (?a) ---> (?g) ---> (?e * _)  ~~~> (?e) ---> (?f) ~~~> (?f * _) ---> (?c) ---> (?i) ~~~> (_ -> ?i) ~~~>  (_ -> _ -> ?i) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ~~~> (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?i)  <~~~ (_ -> ?i)  <~~~ (?i) <--- (_ list * _)  <~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?h) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?h * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?i) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?d -> _ -> ?d) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?d) is assumed for
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?d -> _ -> ?d) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?i) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?i) ~~~> (?i * _ list) ---> (?a) ---> (?h) ---> (?e * _)  ~~~> (?e) ---> (?g) ~~~> (?g * _) ---> (?c) ---> (?j) ~~~> (_ -> ?j) ~~~>  (_ -> _ -> ?j) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (?f * _)  ~~~> (?f) ~~~> (?f * _) <--- (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?j)  <~~~ (_ -> ?j)  <~~~ (?j) <--- (?c) <--- (?g * _)  <~~~ (?g) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?i) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?i * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?g) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?g * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?j) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?d -> _ -> ?d) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?f * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?d -> _ -> ?d) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?j) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?g) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?i) ~~~> (?i * _ list) ---> (?a) ---> (?h) ---> (?e * _)  ~~~> (?e) ---> (?g) ~~~> (?g * _) ---> (?c) ---> (?j) ~~~> (_ -> ?j) ~~~>  (_ -> _ -> ?j) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (?f * _)  ~~~> (?f) ~~~> (?f * _) <--- (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?j)  <~~~ (_ -> ?j)  <~~~ (?j) <--- (?c) <--- (?g * _)  <~~~ (?g) <--- (?e) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?i) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?i * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?g) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?g * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?j) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?d -> _ -> ?d) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?f * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?d -> _ -> ?d) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?j) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?g) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1361    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?i) ~~~> (?i * _ list) ---> (?a) ---> (?h) ---> (?e * _)  ~~~> (?e) ---> (?g) ~~~> (?g * _) ---> (?c) ---> (?j) ~~~> (_ -> ?j) ~~~>  (_ -> _ -> ?j) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (?f * _)  ~~~> (?f) ~~~> (?f * _) <--- (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?j)  <~~~ (_ -> ?j)  <~~~ (?j) <--- (?c) <--- (?g * _)  <~~~ (?g) <--- (?e) <~~~ (?e * _) <--- (?h) <--- (_ list * _)  <~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?i) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?i * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?g) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?g * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?j) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?d -> _ -> ?d) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?f * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?d -> _ -> ?d) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?j) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?g) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?i) ~~~> (?i * _ list) ---> (?a) ---> (?h) ---> (?e * _)  ~~~> (?e) ---> (?g) ~~~> (?g * _) ---> (?c) ---> (?j) ~~~> (_ -> ?j) ~~~>  (_ -> _ -> ?j) ---> (?d -> _ -> ?d)  ~~~> (_ -> ?d)  ~~~> (?d) ---> (?f * _)  ~~~> (?f) ~~~> (?f * _) <--- (?d) <~~~ (_ -> ?d) <~~~  (?d -> _ -> ?d) <--- (_ -> _ -> ?j)  <~~~ (_ -> ?j)  <~~~ (?j) <--- (?c) <--- (?g * _)  <~~~ (?g) <--- (?e) <~~~ (?e * _) <--- (?h) <--- (?a) <--- (?i * _ list)  <~~~ (?i) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?i) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?i * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?g) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?g * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?j) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?d -> _ -> ?d) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?f * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?d -> _ -> ?d) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?j) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?j) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?g) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?i * _ list) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?i) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'b = list[int] -> list[('c, list['a],)], list['d]
//│ U max: 13, total: 367
//│ UERR 22 errors
//│ L: 3 [([α1011'], [[[α867'']]],) ~ list[α872''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([α937''], [α935''],) - α937'', L: 2 [([[α965'']], [[α936'']],) ~ ([α937''], [α935''],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', [α967'' - (α970'' -> [α967'']) ~ (α971'' -> α968'') - α968'', L: 1 [(α970'' -> [α967'']) ~ (α971'' -> α968''), [(α970'' -> [α967'']) - (α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')) - (α971'' -> α968''), L: 0 [(α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')), (α969'' -> (α970'' -> [α967''])) <: (α968'' -> (α971'' -> α968''))]]]], α968'' <: ([α937''], [α935''],)]], [α937'' - ([α937''], [α935''],) ~ ([[α965'']], [[α936'']],) - α965'', L: 2 [([α937''], [α935''],) ~ ([[α965'']], [[α936'']],), ([α937''], [α935''],) :> α968'', [α968'' - (α971'' -> α968'') ~ (α970'' -> [α967'']) - α967'', L: 1 [(α971'' -> α968'') ~ (α970'' -> [α967'']), [(α971'' -> α968'') - (α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])) - (α970'' -> [α967'']), L: 0 [(α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])), (α968'' -> (α971'' -> α968'')) :> (α969'' -> (α970'' -> [α967'']))]]]], α967'' :> α966'', α966'' :> ([[α965'']], [[α936'']],)]], α965'' :> α898'', [α898'' - ([α898''], [α938''],) ~ ([[α897'']], [[list[α899'']]],) - α897'', L: 0 [([α898''], [α938''],) ~ ([[α897'']], [[list[α899'']]],), ([α898''], [α938''],) :> α941'', α941'' :> α940'', α940'' :> ([[α897'']], [[list[α899'']]],)]], α897'' <: list[α872'']]
//│ L: 3 [([α1011'], [[[α867'']]],) ~ list[α942''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([α937''], [α935''],) - α937'', L: 2 [([[α965'']], [[α936'']],) ~ ([α937''], [α935''],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', [α967'' - (α970'' -> [α967'']) ~ (α971'' -> α968'') - α968'', L: 1 [(α970'' -> [α967'']) ~ (α971'' -> α968''), [(α970'' -> [α967'']) - (α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')) - (α971'' -> α968''), L: 0 [(α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')), (α969'' -> (α970'' -> [α967''])) <: (α968'' -> (α971'' -> α968''))]]]], α968'' <: ([α937''], [α935''],)]], [α937'' - ([α937''], [α935''],) ~ ([[α965'']], [[α936'']],) - α965'', L: 2 [([α937''], [α935''],) ~ ([[α965'']], [[α936'']],), ([α937''], [α935''],) :> α968'', [α968'' - (α971'' -> α968'') ~ (α970'' -> [α967'']) - α967'', L: 1 [(α971'' -> α968'') ~ (α970'' -> [α967'']), [(α971'' -> α968'') - (α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])) - (α970'' -> [α967'']), L: 0 [(α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])), (α968'' -> (α971'' -> α968'')) :> (α969'' -> (α970'' -> [α967'']))]]]], α967'' :> α966'', α966'' :> ([[α965'']], [[α936'']],)]], α965'' :> α898'', α898'' <: list[α942'']]
//│ L: 1 [([α1011'], [[[α867'']]],) ~ list[α872''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], [α898'' - ([α898''], [α938''],) ~ ([[α897'']], [[list[α899'']]],) - α897'', L: 0 [([α898''], [α938''],) ~ ([[α897'']], [[list[α899'']]],), ([α898''], [α938''],) :> α941'', α941'' :> α940'', α940'' :> ([[α897'']], [[list[α899'']]],)]], α897'' <: list[α872'']]
//│ L: 0 [([α1011'], [[[α867'']]],) ~ list[α872''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', α897'' <: list[α872'']]
//│ L: 2 [list['a1044'] ~ ([α1173'], [α1174'],), list['a1044'] <: α1042', α1042' <: α1043', α1043' <: α1041', [α1041' - (α1038' -> α1041') ~ (α1034' -> α1033') - α1033', L: 1 [(α1038' -> α1041') ~ (α1034' -> α1033'), [(α1038' -> α1041') - (α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')) - (α1034' -> α1033'), L: 0 [(α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')), (α1035' -> (α1038' -> α1041')) <: (α1033' -> (α1034' -> α1033'))]]]], α1033' <: ([α1173'], [α1174'],)]
//│ L: 3 [([α1011'], [[[α867'']]],) ~ list[α896''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([α937''], [α935''],) - α937'', L: 2 [([[α965'']], [[α936'']],) ~ ([α937''], [α935''],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', [α967'' - (α970'' -> [α967'']) ~ (α971'' -> α968'') - α968'', L: 1 [(α970'' -> [α967'']) ~ (α971'' -> α968''), [(α970'' -> [α967'']) - (α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')) - (α971'' -> α968''), L: 0 [(α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')), (α969'' -> (α970'' -> [α967''])) <: (α968'' -> (α971'' -> α968''))]]]], α968'' <: ([α937''], [α935''],)]], [α937'' - ([α937''], [α935''],) ~ ([[α965'']], [[α936'']],) - α965'', L: 2 [([α937''], [α935''],) ~ ([[α965'']], [[α936'']],), ([α937''], [α935''],) :> α968'', [α968'' - (α971'' -> α968'') ~ (α970'' -> [α967'']) - α967'', L: 1 [(α971'' -> α968'') ~ (α970'' -> [α967'']), [(α971'' -> α968'') - (α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])) - (α970'' -> [α967'']), L: 0 [(α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])), (α968'' -> (α971'' -> α968'')) :> (α969'' -> (α970'' -> [α967'']))]]]], α967'' :> α966'', α966'' :> ([[α965'']], [[α936'']],)]], α965'' <: list[α896'']]
//│ L: 2 [list['a1044'] ~ (α1045' -> α1055'), list['a1044'] <: α1042', α1042' <: α1043', α1043' <: α1041', [α1041' - (α1038' -> α1041') ~ (α1034' -> α1033') - α1033', L: 1 [(α1038' -> α1041') ~ (α1034' -> α1033'), [(α1038' -> α1041') - (α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')) - (α1034' -> α1033'), L: 0 [(α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')), (α1035' -> (α1038' -> α1041')) <: (α1033' -> (α1034' -> α1033'))]]]], [α1033' - (α1034' -> α1033') ~ (α1038' -> α1041') - α1041', L: 1 [(α1034' -> α1033') ~ (α1038' -> α1041'), [(α1034' -> α1033') - (α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')) - (α1038' -> α1041'), L: 0 [(α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')), (α1033' -> (α1034' -> α1033')) :> (α1035' -> (α1038' -> α1041'))]]]], α1041' :> α1043', α1043' :> α1042', α1042' :> (α1045' -> α1055')]
//│ L: 2 [list['a1044'] ~ ([α1036'], [α1037'],), list['a1044'] <: α1042', α1042' <: α1043', α1043' <: α1041', [α1041' - (α1038' -> α1041') ~ (α1034' -> α1033') - α1033', L: 1 [(α1038' -> α1041') ~ (α1034' -> α1033'), [(α1038' -> α1041') - (α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')) - (α1034' -> α1033'), L: 0 [(α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')), (α1035' -> (α1038' -> α1041')) <: (α1033' -> (α1034' -> α1033'))]]]], [α1033' - (α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')) - α1035', L: 0 [(α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')), (α1033' -> (α1034' -> α1033')) :> (α1035' -> (α1038' -> α1041'))]], α1035' <: ([α1036'], [α1037'],)]
//│ L: 2 [(α1045' -> α1055') ~ ([α1173'], [α1174'],), (α1045' -> α1055') <: α1042', α1042' <: α1043', α1043' <: α1041', [α1041' - (α1038' -> α1041') ~ (α1034' -> α1033') - α1033', L: 1 [(α1038' -> α1041') ~ (α1034' -> α1033'), [(α1038' -> α1041') - (α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')) - (α1034' -> α1033'), L: 0 [(α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')), (α1035' -> (α1038' -> α1041')) <: (α1033' -> (α1034' -> α1033'))]]]], α1033' <: ([α1173'], [α1174'],)]
//│ L: 1 [([α1011'], [[[α867'']]],) ~ list[α939''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([[list[α939'']]], [[α936'']],) - list[α939''], L: 0 [([[α965'']], [[α936'']],) ~ ([[list[α939'']]], [[α936'']],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', α967'' :> ([[list[α939'']]], [[α936'']],)]]]
//│ L: 2 [(α1045' -> α1055') ~ ([α1036'], [α1037'],), (α1045' -> α1055') <: α1042', α1042' <: α1043', α1043' <: α1041', [α1041' - (α1038' -> α1041') ~ (α1034' -> α1033') - α1033', L: 1 [(α1038' -> α1041') ~ (α1034' -> α1033'), [(α1038' -> α1041') - (α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')) - (α1034' -> α1033'), L: 0 [(α1035' -> (α1038' -> α1041')) ~ (α1033' -> (α1034' -> α1033')), (α1035' -> (α1038' -> α1041')) <: (α1033' -> (α1034' -> α1033'))]]]], [α1033' - (α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')) - α1035', L: 0 [(α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')), (α1033' -> (α1034' -> α1033')) :> (α1035' -> (α1038' -> α1041'))]], α1035' <: ([α1036'], [α1037'],)]
//│ L: 2 [list['a1000'] ~ (α1031' -> α1032'), [list['a1000'] - ([list['a1000']] -> α1008') ~ ([α855'] -> α1011') - α855', L: 1 [([list['a1000']] -> α1008') ~ ([α855'] -> α1011'), ([list['a1000']] -> α1008') :> α1009', [α1009' - ([α998'] -> α1009') ~ (['a869'] -> α1010') - α1010', L: 0 [([α998'] -> α1009') ~ (['a869'] -> α1010'), ([α998'] -> α1009') :> mulByDigit997', mulByDigit997' <: (['a869'] -> α1010')]], α1010' <: ([α855'] -> α1011')]], α855' <: (α1031' -> α1032')]
//│ L: 1 [([α1011'], [[[α867'']]],) ~ list[α873''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], [α898'' - ([α898''], [α938''],) ~ ([[list[α873'']]], [[α924'']],) - list[α873''], L: 0 [([α898''], [α938''],) ~ ([[list[α873'']]], [[α924'']],), ([α898''], [α938''],) :> α941'', α941'' :> ([[list[α873'']]], [[α924'']],)]]]
//│ L: 2 [([[int]], [[list['a1171']]],) ~ (α1045' -> α1055'), ([[int]], [[list['a1171']]],) <: α1033', [α1033' - (α1034' -> α1033') ~ (α1038' -> α1041') - α1041', L: 1 [(α1034' -> α1033') ~ (α1038' -> α1041'), [(α1034' -> α1033') - (α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')) - (α1038' -> α1041'), L: 0 [(α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')), (α1033' -> (α1034' -> α1033')) :> (α1035' -> (α1038' -> α1041'))]]]], α1041' :> α1043', α1043' :> α1042', α1042' :> (α1045' -> α1055')]
//│ L: 2 [([[int]], [[list['a1171']]],) ~ list['a1044'], ([[int]], [[list['a1171']]],) <: α1033', [α1033' - (α1034' -> α1033') ~ (α1038' -> α1041') - α1041', L: 1 [(α1034' -> α1033') ~ (α1038' -> α1041'), [(α1034' -> α1033') - (α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')) - (α1038' -> α1041'), L: 0 [(α1033' -> (α1034' -> α1033')) ~ (α1035' -> (α1038' -> α1041')), (α1033' -> (α1034' -> α1033')) :> (α1035' -> (α1038' -> α1041'))]]]], α1041' :> α1043', α1043' :> α1042', α1042' :> list['a1044']]
//│ L: 3 [([α1011'], [[[α867'']]],) ~ list[α873''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([α937''], [α935''],) - α937'', L: 2 [([[α965'']], [[α936'']],) ~ ([α937''], [α935''],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', [α967'' - (α970'' -> [α967'']) ~ (α971'' -> α968'') - α968'', L: 1 [(α970'' -> [α967'']) ~ (α971'' -> α968''), [(α970'' -> [α967'']) - (α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')) - (α971'' -> α968''), L: 0 [(α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')), (α969'' -> (α970'' -> [α967''])) <: (α968'' -> (α971'' -> α968''))]]]], α968'' <: ([α937''], [α935''],)]], [α937'' - ([α937''], [α935''],) ~ ([[α965'']], [[α936'']],) - α965'', L: 2 [([α937''], [α935''],) ~ ([[α965'']], [[α936'']],), ([α937''], [α935''],) :> α968'', [α968'' - (α971'' -> α968'') ~ (α970'' -> [α967'']) - α967'', L: 1 [(α971'' -> α968'') ~ (α970'' -> [α967'']), [(α971'' -> α968'') - (α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])) - (α970'' -> [α967'']), L: 0 [(α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])), (α968'' -> (α971'' -> α968'')) :> (α969'' -> (α970'' -> [α967'']))]]]], α967'' :> α966'', α966'' :> ([[α965'']], [[α936'']],)]], α965'' :> α898'', [α898'' - ([α898''], [α938''],) ~ ([[list[α873'']]], [[α924'']],) - list[α873''], L: 0 [([α898''], [α938''],) ~ ([[list[α873'']]], [[α924'']],), ([α898''], [α938''],) :> α941'', α941'' :> ([[list[α873'']]], [[α924'']],)]]]
//│ L: 3 [([α1011'], [[[α867'']]],) ~ list[α939''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', [α965'' - ([[α965'']], [[α936'']],) ~ ([[list[α939'']]], [[α936'']],) - list[α939''], L: 2 [([[α965'']], [[α936'']],) ~ ([[list[α939'']]], [[α936'']],), ([[α965'']], [[α936'']],) <: α966'', α966'' <: α967'', [α967'' - (α970'' -> [α967'']) ~ (α971'' -> α968'') - α968'', L: 1 [(α970'' -> [α967'']) ~ (α971'' -> α968''), [(α970'' -> [α967'']) - (α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')) - (α971'' -> α968''), L: 0 [(α969'' -> (α970'' -> [α967''])) ~ (α968'' -> (α971'' -> α968'')), (α969'' -> (α970'' -> [α967''])) <: (α968'' -> (α971'' -> α968''))]]]], [α968'' - (α971'' -> α968'') ~ (α970'' -> [α967'']) - α967'', L: 1 [(α971'' -> α968'') ~ (α970'' -> [α967'']), [(α971'' -> α968'') - (α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])) - (α970'' -> [α967'']), L: 0 [(α968'' -> (α971'' -> α968'')) ~ (α969'' -> (α970'' -> [α967''])), (α968'' -> (α971'' -> α968'')) :> (α969'' -> (α970'' -> [α967'']))]]]], α967'' :> ([[list[α939'']]], [[α936'']],)]]]
//│ L: 0 [([α1011'], [[[α867'']]],) ~ list[α873''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', α897'' <: list[α873'']]
//│ L: 0 [(α996'' -> α934'') ~ list['a870''], (α996'' -> α934'') <: α868'', α868'' :> list['a870'']]
//│ L: 1 [([α1011'], [[[α867'']]],) ~ list[α942''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: list[α942'']]
//│ L: 2 [list[α1001'] ~ (α1031' -> α1032'), list[α1001'] :> α999', [α999' - (α999' -> α1002') ~ ([α855'] -> α1011') - α855', L: 1 [(α999' -> α1002') ~ ([α855'] -> α1011'), [(α999' -> α1002') - (α998' -> (α999' -> α1002')) ~ (['a869'] -> α1010') - α1010', L: 0 [(α998' -> (α999' -> α1002')) ~ (['a869'] -> α1010'), (α998' -> (α999' -> α1002')) <: mulByDigit997', mulByDigit997' <: (['a869'] -> α1010')]], α1010' <: ([α855'] -> α1011')]], α855' <: (α1031' -> α1032')]
//│ L: 1 [([α1011'], [[[α867'']]],) ~ list[α896''], ([α1011'], [[[α867'']]],) <: α871'', α871'' <: α897'', [α897'' - ([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],) - α898'', L: 0 [([[α897'']], [[list[α899'']]],) ~ ([α898''], [α938''],), ([[α897'']], [[list[α899'']]],) <: α940'', α940'' <: α941'', α941'' <: ([α898''], [α938''],)]], α898'' <: α965'', α965'' <: list[α896'']]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?c) <~~~ (?c * _) <~~~  ((?c * _) -> _) ---> (?wwhile) ---> ((?a * _) -> _)  <~~~ (?a * _)  <~~~ (?a) <--- (?b) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│   ◉ (?c * _) comes from
//│      - l.3  let rec wwhile (f,b) =
//│                            ^^^^^
//│     ◉ ((?c * _) -> _) comes from
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                        ^^^^^^^
//│     │           match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ (?wwhile) is assumed for
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?a * _) -> _) comes from
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│   ◉ (?a * _) comes from
//│      - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                         ^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) comes from
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 10, total: 58
//│ UERR 1 errors
//│ L: 2 [([α1207'] -> α1212') ~ ([[[α1215']]], [[bool]],), ([α1207'] -> α1212') :> α1206', [α1206' - ([α1206'], [α1207'],) ~ ([[α1217']], [[α1204']],) - α1217', L: 1 [([α1206'], [α1207'],) ~ ([[α1217']], [[α1204']],), [([α1206'], [α1207'],) - (([α1206'], [α1207'],) -> α1211') ~ (([[α1217']], [[α1204']],) -> α1219') - ([[α1217']], [[α1204']],), L: 0 [(([α1206'], [α1207'],) -> α1211') ~ (([[α1217']], [[α1204']],) -> α1219'), (([α1206'], [α1207'],) -> α1211') <: wwhile1205', wwhile1205' <: (([[α1217']], [[α1204']],) -> α1219')]]]], α1217' :> α1218', α1218' :> ([[[α1215']]], [[bool]],)]


// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?b) <--- (?a) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?a) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~>  ((_ * _) list) ---> (?a list)  (?a) ~~~> (?a list) ---> (?b list)  ~~~> (?b) ~~~> (?b -> _) <~~~  (_ -> ?b -> _) <--- (_ -> ?c -> _)  <~~~ (?c -> _)  ~~~> (?c) ---> (?d) <--- (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                    ^^^^^^^
//│   ◉ ((_ * _) list) comes from
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) comes from
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?b) is assumed for
//│   ◉ (?b -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?c) <--- (?b) <~~~ (?b -> _) ~~~>  (_ -> ?b -> _) ---> (_ -> ?a -> _)  ~~~> (?a -> _)  <~~~ (?a) <~~~ (?a -> _) <~~~  (_ -> ?a -> _) <--- (_ -> ?b -> _)  <~~~ (?b -> _)  ~~~> (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.14     let f a x =
//│                       ^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?a -> _) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?a -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 35, total: 551
//│ UERR 3 errors
//│ L: 0 [list['a1304'''] ~ ([α1308'''], [α1309'''],), list['a1304'''] <: α1303''', α1303''' :> α1299''', α1299''' <: ([α1308'''], [α1309'''],)]
//│ L: 2 [([α1313''], [α1314''],) ~ list['a1325''], [([α1313''], [α1314''],) - list[([α1313''], [α1314''],)] ~ list[α1331''] - α1331'', L: 0 [list[([α1313''], [α1314''],)] ~ list[α1331''], list[([α1313''], [α1314''],)] <: list[α1331'']]], [α1331'' - list[α1331''] ~ list[α1316''] - α1316'', L: 0 [list[α1331''] ~ list[α1316''], list[α1331''] <: list[α1316'']]], [α1316'' - (α1316'' -> α1315'') ~ (α1322'' -> α1327'') - α1322'', L: 1 [(α1316'' -> α1315'') ~ (α1322'' -> α1327''), [(α1316'' -> α1315'') - (α1315'' -> (α1316'' -> α1315'')) ~ (α1317'' -> (α1322'' -> α1327'')) - (α1322'' -> α1327''), L: 0 [(α1315'' -> (α1316'' -> α1315'')) ~ (α1317'' -> (α1322'' -> α1327'')), (α1315'' -> (α1316'' -> α1315'')) :> (α1317'' -> (α1322'' -> α1327''))]]]], α1322'' <: α1326'', α1326'' :> list['a1325'']]
//│ L: 2 [list['a1325''] ~ ([α1323''], [α1324''],), list['a1325''] <: α1326'', α1326'' :> α1322'', [α1322'' - (α1322'' -> α1327'') ~ (α1316'' -> α1315'') - α1316'', L: 1 [(α1322'' -> α1327'') ~ (α1316'' -> α1315''), [(α1322'' -> α1327'') - (α1317'' -> (α1322'' -> α1327'')) ~ (α1315'' -> (α1316'' -> α1315'')) - (α1316'' -> α1315''), L: 0 [(α1317'' -> (α1322'' -> α1327'')) ~ (α1315'' -> (α1316'' -> α1315'')), (α1317'' -> (α1322'' -> α1327'')) <: (α1315'' -> (α1316'' -> α1315''))]]]], [α1316'' - (α1316'' -> α1315'') ~ (α1322'' -> α1327'') - α1322'', L: 1 [(α1316'' -> α1315'') ~ (α1322'' -> α1327''), [(α1316'' -> α1315'') - (α1315'' -> (α1316'' -> α1315'')) ~ (α1317'' -> (α1322'' -> α1327'')) - (α1322'' -> α1327''), L: 0 [(α1315'' -> (α1316'' -> α1315'')) ~ (α1317'' -> (α1322'' -> α1327'')), (α1315'' -> (α1316'' -> α1315'')) :> (α1317'' -> (α1322'' -> α1327''))]]]], α1322'' <: ([α1323''], [α1324''],)]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) <~~~ (?a -> _ -> int) ---> (?b -> _ -> ?b)  <~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) comes from
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~>  (_ -> int) ~~~>  (_ -> _ -> int) ---> (?a -> _ -> ?a)  ~~~> (_ -> ?a)  ~~~> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│    - l.14     let f a x = (a + x) mod 10 in
//│                           ^^^^^^^^^^^^^^
//│    - lib. let mod: int -> int -> int
//│                                  ^^^
//│   ◉ (_ -> int) comes from
//│      - l.14     let f a x = (a + x) mod 10 in
//│                         ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> int) comes from
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 63, total: 556
//│ UERR 3 errors
//│ L: 0 [int ~ ([α1493''], [α1494''],), int <: α1486'', α1486'' <: ([α1493''], [α1494''],)]
//│ L: 2 [int ~ ([α1493''], [α1494''],), [int - (α1489'' -> [int]) ~ (α1487'' -> α1486'') - α1486'', L: 1 [(α1489'' -> [int]) ~ (α1487'' -> α1486''), [(α1489'' -> [int]) - (α1488'' -> (α1489'' -> [int])) ~ (α1486'' -> (α1487'' -> α1486'')) - (α1487'' -> α1486''), L: 0 [(α1488'' -> (α1489'' -> [int])) ~ (α1486'' -> (α1487'' -> α1486'')), (α1488'' -> (α1489'' -> [int])) <: (α1486'' -> (α1487'' -> α1486''))]]]], α1486'' <: ([α1493''], [α1494''],)]
//│ L: 1 [int ~ ([α1493''], [α1494''],), int :> α1488'', [α1488'' - (α1488'' -> (α1489'' -> [int])) ~ (α1486'' -> (α1487'' -> α1486'')) - α1486'', L: 0 [(α1488'' -> (α1489'' -> [int])) ~ (α1486'' -> (α1487'' -> α1486'')), (α1488'' -> (α1489'' -> [int])) <: (α1486'' -> (α1487'' -> α1486''))]], α1486'' <: ([α1493''], [α1494''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?b) <~~~ (_ -> ?b) <--- (?a) <~~~ (?a * _) <~~~  ((?a * _) -> _) ---> (?wwhile) ---> ((_ -> _ -> (_ * bool) * _) -> _)  <~~~ (_ -> _ -> (_ * bool) * _)  <~~~ (_ -> _ -> (_ * bool))  <~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) comes from
//│ ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?b) comes from
//│   ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.-352let rec wwhile (f,b) =
//│                              ^
//│     ◉ (?a * _) comes from
//│        - l.-352let rec wwhile (f,b) =
//│                               ^^^^^
//│       ◉ ((?a * _) -> _) comes from
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                         ^^^^^^^
//│       │            match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ (?wwhile) is assumed for
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) comes from
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│     ◉ (_ -> _ -> (_ * bool) * _) comes from
//│        - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                           ^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> (_ * bool)) comes from
//│      - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                          ^^^^^^^^
//│      - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ -> (_ * bool)) comes from
//│    - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ U max: 10, total: 70
//│ UERR 1 errors
//│ L: 3 [([α1571'], [α1576'],) ~ (α1578' -> ([α1581'], [[bool]],)), ([α1571'], [α1576'],) :> α1575', [α1575' - ([α1570'] -> α1575') ~ (α1577' -> (α1578' -> ([α1581'], [[bool]],))) - (α1578' -> ([α1581'], [[bool]],)), L: 2 [([α1570'] -> α1575') ~ (α1577' -> (α1578' -> ([α1581'], [[bool]],))), ([α1570'] -> α1575') :> α1569', [α1569' - ([α1569'], [α1570'],) ~ ([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],) - (α1577' -> (α1578' -> ([α1581'], [[bool]],))), L: 1 [([α1569'], [α1570'],) ~ ([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],), [([α1569'], [α1570'],) - (([α1569'], [α1570'],) -> α1574') ~ (([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],) -> α1582') - ([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],), L: 0 [(([α1569'], [α1570'],) -> α1574') ~ (([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],) -> α1582'), (([α1569'], [α1570'],) -> α1574') <: wwhile1568', wwhile1568' <: (([[(α1577' -> (α1578' -> ([α1581'], [[bool]],)))]], [[α1567']],) -> α1582')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ---> (?b) ~~~> (_ -> ?b) ---> (?sumList) ---> (_ list -> ?c)  ~~~> (?c) ~~~> (_ list -> ?c) <--- (?sumList) <--- (_ -> ?b)  <~~~ (?b) <~~~ (_ -> ?b) ---> (?sumList) ---> (_ -> ?a)  ~~~> (?a) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│ │                                                    ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?c) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                      ^^^^^^^^^^^
//│   ◉ (_ list -> ?c) comes from
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed for
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (_ -> ?b) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ digitsOfInt: int -> list[int]
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: int -> int
//│ U max: 9, total: 157
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence1637'] -> α1673'), int <: α1658', [α1658' - (α1656' -> α1658') ~ ([list['a1657']] -> α1659') - α1659', L: 0 [(α1656' -> α1658') ~ ([list['a1657']] -> α1659'), (α1656' -> α1658') <: sumList1655', sumList1655' <: ([list['a1657']] -> α1659')]], [α1659' - ([list['a1657']] -> α1659') ~ (α1656' -> α1658') - α1658', L: 0 [([list['a1657']] -> α1659') ~ (α1656' -> α1658'), ([list['a1657']] -> α1659') :> sumList1655', sumList1655' :> (α1656' -> α1658')]], [α1658' - (α1656' -> α1658') ~ ([α1660'] -> α1672') - α1672', L: 0 [(α1656' -> α1658') ~ ([α1660'] -> α1672'), (α1656' -> α1658') <: sumList1655', sumList1655' <: ([α1660'] -> α1672')]], α1672' <: ([additivePersistence1637'] -> α1673')]



// file 1770
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ~~~>  (_ -> _ -> _) ---> (?filter) ---> (_ -> ?a)  (?a) ~~~> (_ * ?a) ---> (_ * _ list)  ~~~> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│    - l.1  let rec filter l a =
//│                            ^^^
//│             match l with ...
//│             ^^^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) comes from
//│   │  - l.1  let rec filter l a =
//│   │                        ^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?a) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?c) <~~~ (_ list -> ?c) <--- (?filter) ---> (_ list -> ?b)  ~~~> (?b) <~~~ (_ list -> ?b) <--- (?filter) ---> (_ -> ?a)  ~~~> (?a) <~~~ (_ * ?a) ---> (_ * _ list)  ~~~> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?c) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?a) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?b) <~~~ (_ list -> ?b) <--- (?filter) ---> (_ list -> ?c)  ~~~> (?c) <~~~ (_ list -> ?c) <--- (?filter) ---> (_ list -> ?b)  ~~~> (?b) <~~~ (_ list -> ?b) <--- (?filter) ---> (_ -> ?a)  ~~~> (?a) <~~~ (_ * ?a) ---> (_ * _ list)  ~~~> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?c) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?c) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?a) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ filter: list['a] -> 'b -> list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 18, total: 218
//│ UERR 4 errors
//│ L: 1 [([α1707'''] -> α1706''') ~ list['a1699''], ([α1707'''] -> α1706''') :> α1711''', [α1711''' - ([list['a1702''']] -> α1711''') ~ ([list['a1702''']] -> α1709''') - α1709''', L: 0 [([list['a1702''']] -> α1711''') ~ ([list['a1702''']] -> α1709'''), ([list['a1702''']] -> α1711''') :> filter1700''', filter1700''' <: ([list['a1702''']] -> α1709''')]], [α1709''' - ([list['a1702''']] -> α1709''') ~ (α1713''' -> α1714''') - α1714''', L: 0 [([list['a1702''']] -> α1709''') ~ (α1713''' -> α1714'''), ([list['a1702''']] -> α1709''') :> filter1700''', filter1700''' <: (α1713''' -> α1714''')]], [α1714''' - ([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],) - list['a1699''], L: 0 [([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],), ([['a1698'']], [α1714'''],) <: ('a1699'', list['a1699''],)]]]
//│ L: 1 [([α1707'''] -> α1705''') ~ list['a1699''], ([α1707'''] -> α1705''') :> α1709''', [α1709''' - ([list['a1702''']] -> α1709''') ~ ([list['a1702''']] -> α1711''') - α1711''', L: 0 [([list['a1702''']] -> α1709''') ~ ([list['a1702''']] -> α1711'''), ([list['a1702''']] -> α1709''') :> filter1700''', filter1700''' <: ([list['a1702''']] -> α1711''')]], [α1711''' - ([list['a1702''']] -> α1711''') ~ ([list['a1702''']] -> α1709''') - α1709''', L: 0 [([list['a1702''']] -> α1711''') ~ ([list['a1702''']] -> α1709'''), ([list['a1702''']] -> α1711''') :> filter1700''', filter1700''' <: ([list['a1702''']] -> α1709''')]], [α1709''' - ([list['a1702''']] -> α1709''') ~ (α1713''' -> α1714''') - α1714''', L: 0 [([list['a1702''']] -> α1709''') ~ (α1713''' -> α1714'''), ([list['a1702''']] -> α1709''') :> filter1700''', filter1700''' <: (α1713''' -> α1714''')]], [α1714''' - ([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],) - list['a1699''], L: 0 [([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],), ([['a1698'']], [α1714'''],) <: ('a1699'', list['a1699''],)]]]
//│ L: 1 [(α1707''' -> α1710''') ~ list['a1699''], [(α1707''' -> α1710''') - (α1701''' -> (α1707''' -> α1710''')) ~ (α1713''' -> α1714''') - α1714''', L: 0 [(α1701''' -> (α1707''' -> α1710''')) ~ (α1713''' -> α1714'''), (α1701''' -> (α1707''' -> α1710''')) <: filter1700''', filter1700''' <: (α1713''' -> α1714''')]], [α1714''' - ([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],) - list['a1699''], L: 0 [([['a1698'']], [α1714'''],) ~ ('a1699'', list['a1699''],), ([['a1698'']], [α1714'''],) <: ('a1699'', list['a1699''],)]]]
//│ L: 0 [list['a1698''] ~ (['a1698''] -> α1713'''), list['a1698''] <: (['a1698''] -> α1713''')]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?b * _ * _) <~~~  ((?b * _ * _) -> ?c) ---> (?assoc) ---> (?b -> ?a)  <~~~ (?b) ---> (?c) ~~~> ((?b * _ * _) -> ?c) ---> (?assoc) ---> (?b -> ?a)  ~~~> (?a) ---> (_ -> _)
//│ 
//│ ◉ (?b * _ * _) comes from
//│    - l.1  let rec assoc (d,k,l) =
//│                         ^^^^^^^
//│   ◉ ((?b * _ * _) -> ?c) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?b -> ?a) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?b * _ * _) -> ?c) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?b -> ?a) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ │                                                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                               ^^^^^^^
//│ assoc: 'assoc
//│   where
//│     'assoc = (('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],), 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,), ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,)
//│     'b = ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],)
//│     'a = ('d, 'a -> ('b, 'c, 'e,),)
//│     'e = list[('d, 'a -> ('b, 'c, 'e,),)]
//│ U max: 10, total: 35
//│ UERR 1 errors
//│ L: 1 [([α1783'], [α1784'], [α1785'],) ~ ([α1784'] -> α1795'), [([α1783'], [α1784'], [α1785'],) - (([α1783'], [α1784'], [α1785'],) -> α1786') ~ ([α1783'] -> α1794') - α1783', L: 0 [(([α1783'], [α1784'], [α1785'],) -> α1786') ~ ([α1783'] -> α1794'), (([α1783'], [α1784'], [α1785'],) -> α1786') <: assoc1782', assoc1782' <: ([α1783'] -> α1794')]], α1783' <: α1786', [α1786' - (([α1783'], [α1784'], [α1785'],) -> α1786') ~ ([α1783'] -> α1794') - α1794', L: 0 [(([α1783'], [α1784'], [α1785'],) -> α1786') ~ ([α1783'] -> α1794'), (([α1783'], [α1784'], [α1785'],) -> α1786') <: assoc1782', assoc1782' <: ([α1783'] -> α1794')]], α1794' <: ([α1784'] -> α1795')]
