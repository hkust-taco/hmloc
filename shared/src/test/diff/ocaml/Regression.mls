:AllowTypeErrors



let test =
  let f x = x in
  (f 1 + f true)
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.3    (f 1 + f true)
//│ │                    ^^^^
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ │  - l.2    let f x = x in
//│ │                     ^
//│ │  - l.3    (f 1 + f true)
//│ │                  ^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│ test: int
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α44', α44' <: int]



let test2 = let (a, b) = test in [[b]] + 1
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.-28  (f 1 + f true)
//│ │           ^^^^^^^^^^^^^^^
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                  ^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│                           ^^^^^^
//│ [ERROR] Type `_ list list` does not match `int`
//│ 
//│         (_ list list) ---> (int)
//│ 
//│ ◉ (_ list list) comes from
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                          ^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│ test2: int
//│ U max: 1, total: 4
//│ UERR 2 errors
//│ L: 0 [int ~ ([α46'], [α47'],), int <: ([α46'], [α47'],)]
//│ L: 0 [list[list[[[α47']]]] ~ int, list[list[[[α47']]]] <: int]


let f x = x + 1
not (f 1)
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.1  let f x = x + 1
//│ │                   ^^^^^
//│ │  - l.2  not (f 1)
//│ │             ^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ f: int -> int
//│ res: bool
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]


:d
let a = 1
not a
//│ 1. Typing term 1 IntLit
//│ 1. : [int]
//│ ⬤ U Typed as: [int]
//│  where: 
//│ 0. Typing term not a App
//│ | 0. Typing term not Var
//│ | 0. : [(bool -> bool)]
//│ | 0. Typing term a Var
//│ | 0. : [[int]]
//│ | U Q [[int]] ~ bool
//│ | U L: 0 [int ~ bool, int <: bool]
//│ | UERR L: 0 [int ~ bool, int <: bool]
//│ 0. : [bool]
//│ ⬤ U Typed as: [bool]
//│  where: 
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  not a
//│ │             ^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ a: int
//│ res: bool
//│ U max: 1, total: 1
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]


let confluence z = if true then z else 5
confluence true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.2  confluence true
//│ │                    ^^^^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ res: 'a
//│   where
//│     'a = bool, int
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α53, α53 <: α54, α54 :> int]


let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit


f x
//│ [ERROR] Type `int` does not match `string`
//│ 
//│         (int) ~~~>  (int list) ---> (string list)  ~~~> (string)
//│ 
//│ ◉ (int) comes from
//│    - l.-7 let x: int list
//│                  ^^^
//│   ◉ (int list) comes from
//│   │  - l.-7 let x: int list
//│   │                ^^^^^^^^
//│   │  - l.1  f x
//│   │           ^
//│   ▼ 
//│   ◉ (string list) comes from
//│      - l.-5 let f: string list -> unit
//│                    ^^^^^^^^^^^
//│ ◉ (string) comes from
//│    - l.-5 let f: string list -> unit
//│                  ^^^^^^
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 1 [int ~ string, [int - list[int] ~ list[string] - string, L: 0 [list[int] ~ list[string], list[int] <: list[string]]]]

// Should show
// ╔══[ERROR] Type `string list` does not match `int list`
// ║  
// ╟──        string list ---> ?a <--- int list 
// ║  
// ╟── `string list` comes from this type expression
// ║  l.-10: 	let y: string list
// ║         	       ^^^^^^^^^^^
// ╟── this `else` branch has type `string list` and it flows into `?a`
// ║  l.1: 	if true then x else y
// ║       	                    ^
// ╟── this if-then-else expression has type `?a`
// ║  l.1: 	if true then x else y
// ║       	^^^^^^^^^^^^^^^^^^^^^
// ╟── this `then` branch has type `?a` and it flows from `int list`
// ║  l.1: 	if true then x else y
// ║       	             ^
// ╟── this applied type reference has type `int list`
// ║  l.-11: 	let x: int list
// ╙──       	       ^^^^^^^^
// res: list[int | string]
if true then x else y
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ~~~>  (string list) ---> (?a) <--- (int list)  <~~~ (int)
//│ 
//│ ◉ (string) comes from
//│    - l.-51let y: string list
//│                  ^^^^^^
//│   ◉ (string list) comes from
//│   │  - l.-51let y: string list
//│   │                ^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                             ^
//│   │  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                      ^
//│   │ 
//│   ◉ (int list) comes from
//│      - l.-52let x: int list
//│                    ^^^^^^^^
//│ ◉ (int) comes from
//│    - l.-52let x: int list
//│                  ^^^
//│ res: 'a
//│   where
//│     'a = list[string], list[int]
//│ U max: 1, total: 5
//│ UERR 1 errors
//│ L: 1 [string ~ int, [string - list[string] ~ list[int] - int, L: 0 [list[string] ~ list[int], list[string] <: α56, α56 :> list[int]]]]


Left 1 : int
//│ [ERROR] Type `(_, _) either` does not match `int`
//│ 
//│         ((_, _) either) ---> (int)
//│ 
//│ ◉ ((_, _) either) comes from
//│ │  - lib. type ('a, 'b) either = Left of 'a | Right of 'b
//│ │                                ^^^^^^^^^^
//│ │  - l.1  Left 1 : int
//│ │         ^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - l.1  Left 1 : int
//│                    ^^^
//│ res: int
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 0 [either[α57,α58] ~ int, either[α57,α58] <: int]


let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
mkpair 1 "2"
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ---> (?a) ---> (?b) ---> (?c) <--- (int)
//│ 
//│ ◉ (string) comes from
//│ │  - l.3  mkpair 1 "2"
//│ │                  ^^^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ mkpair: 'a -> 'b -> ('a, int,)
//│ res: (int, 'a,)
//│   where
//│     'a = string, int
//│ U max: 2, total: 10
//│ UERR 1 errors
//│ L: 0 [string ~ int, string <: α69, α69 <: α70, α70 <: α71, α71 :> int]


let a = 1
let b = a
let f x = if x then true else false
let g = f
g b
//│ [ERROR] Type `int` does not match `string list`
//│ 
//│         (int) ---> (string list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  let b = a
//│ │                 ^
//│ │  - l.5  g b
//│ │           ^
//│ ▼ 
//│ ◉ (string list) comes from
//│    - l.-152let f: string list -> unit
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `unit`
//│ 
//│         (bool) ---> (?a) ~~~> (_ -> ?a) ---> (string list -> unit)  ~~~> (unit)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.3  let f x = if x then true else false
//│ │                             ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.3  let f x = if x then true else false
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) comes from
//│      - l.-152let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ ◉ (unit) comes from
//│    - l.-152let f: string list -> unit
//│                                  ^^^^
//│ [ERROR] Type `bool` does not match `string list`
//│ 
//│         (bool) <--- (?a) <~~~ (?a -> _) ---> (string list -> unit)  <~~~ (string list)
//│ 
//│ ◉ (bool) comes from
//│ ▲  - l.3  let f x = if x then true else false
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.3  let f x = if x then true else false
//│                 ^
//│   ◉ (?a -> _) comes from
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) comes from
//│      - l.-152let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ ◉ (string list) comes from
//│    - l.-152let f: string list -> unit
//│                   ^^^^^^^^^^^
//│ a: int
//│ b: int
//│ bool -> bool
//│   <:  f:
//│ list[string] -> unit
//│ g: list[string] -> unit
//│ U max: 3, total: 8
//│ UERR 3 errors
//│ L: 1 [bool ~ unit, bool <: α76, [α76 - (α75 -> α76) ~ (list[string] -> unit) - unit, L: 0 [(α75 -> α76) ~ (list[string] -> unit), (α75 -> α76) <: (list[string] -> unit)]]]
//│ L: 1 [bool ~ list[string], bool :> α75, [α75 - (α75 -> α76) ~ (list[string] -> unit) - list[string], L: 0 [(α75 -> α76) ~ (list[string] -> unit), (α75 -> α76) <: (list[string] -> unit)]]]
//│ L: 0 [int ~ list[string], int <: list[string]]

let wrap x = x :: []
//│ wrap: 'a -> list['a]


if true then wrap 1 else wrap true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ~~~> (?a list) ---> (?b) <--- (?c list)  <~~~ (?c) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap 1 else wrap true
//│ │                                       ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-3 let wrap x = x :: []
//│                    ^
//│   ◉ (?a list) comes from
//│   │  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                                  ^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                      ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-3 let wrap x = x :: []
//│ │                  ^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap 1 else wrap true
//│                             ^
//│ res: list[bool]
//│ U max: 2, total: 11
//│ UERR 1 errors
//│ L: 1 [bool ~ int, bool <: α80, [α80 - list[[α80]] ~ list[[α79]] - α79, L: 0 [list[[α80]] ~ list[[α79]], list[[α80]] <: α78, α78 :> list[[α79]]]], α79 :> int]


if true then wrap (if true then 1 else false) else wrap true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                                ^^^^^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                           ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?d) ~~~> (?d list) ---> (?a) <--- (?b list)  <~~~ (?b) <--- (?c) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                                                 ^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-45let wrap x = x :: []
//│                    ^
//│   ◉ (?d list) comes from
//│   │  - l.-45let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│   │                                                            ^^^^^^^^^
//│   │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b list) comes from
//│      - l.-45let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.-45let wrap x = x :: []
//│ │                  ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                           ^
//│ res: list[bool]
//│ U max: 4, total: 17
//│ UERR 2 errors
//│ L: 0 [bool ~ int, bool <: α84, α84 :> int]
//│ L: 1 [bool ~ int, bool <: α85, [α85 - list[[α85]] ~ list[[α83]] - α83, L: 0 [list[[α85]] ~ list[[α83]], list[[α85]] <: α82, α82 :> list[[α83]]]], α83 :> α84, α84 :> int]


let rec t = wrap (if true then 1 else t)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?t) ---> (?b) ---> (?a) <--- (?b) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-111let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-111let wrap x = x :: []
//│ │                   ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.-111let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ t: 't
//│   where
//│     't = list['t], int
//│ U max: 3, total: 11
//│ UERR 1 errors
//│ L: 0 [list[[α88']] ~ int, list[[α88']] <: t87', t87' <: α89', α89' <: α88', α88' :> α89', α89' :> int]


let test z = if true then wrap z else wrap true
 
let rec m = test (if true then 1 else m)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?b) ---> (?m) ---> (?c) ---> (?a) <--- (?c) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?b) ---> (?m) ---> (?c) ---> (?a) <--- (?c) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (?c list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (?e list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (int)
//│ 
//│ ◉ (?c list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (int)
//│ 
//│ ◉ (?e list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (int)
//│ 
//│ ◉ (?e list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                                    ^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (int)
//│ 
//│ ◉ (?c list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `bool` does not match `_ list`
//│ 
//│         (bool) ---> (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                                    ^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │ 
//│ ◉ (?m) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │ 
//│ ◉ (?e list) comes from
//│    - l.-159let wrap x = x :: []
//│                         ^^^^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (?c list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?d) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?c list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       ▼ 
//│       ◉ (?m) is assumed for
//│       ▲  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │ 
//│       ◉ (?e list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?e) is assumed for
//│        - l.-159let wrap x = x :: []
//│                             ^
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?e list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │ 
//│       ◉ (?c list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?c) is assumed for
//│     ▲  - l.-159let wrap x = x :: []
//│     │                   ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?d) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │ 
//│ ◉ (?m) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │ 
//│ ◉ (?e list) comes from
//│    - l.-159let wrap x = x :: []
//│                         ^^^^^^^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?d) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?c list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       ▼ 
//│       ◉ (?m) is assumed for
//│       ▲  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │ 
//│       ◉ (?e list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?e) is assumed for
//│        - l.-159let wrap x = x :: []
//│                             ^
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?e list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │ 
//│       ◉ (?c list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?c) is assumed for
//│     ▲  - l.-159let wrap x = x :: []
//│     │                   ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?d) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?d) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?c list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       ▼ 
//│       ◉ (?m) is assumed for
//│       ▲  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │ 
//│       ◉ (?e list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?e) is assumed for
//│        - l.-159let wrap x = x :: []
//│                             ^
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?e list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │ 
//│       ◉ (?c list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?c) is assumed for
//│     ▲  - l.-159let wrap x = x :: []
//│     │                   ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?d) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │ 
//│ ◉ (?m) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │ 
//│ ◉ (?c list) comes from
//│    - l.-159let wrap x = x :: []
//│                         ^^^^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) <--- (bool)
//│ 
//│ ◉ (?e list) comes from
//│ │  - l.-159let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?d) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?c list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       ▼ 
//│       ◉ (?m) is assumed for
//│       ▲  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │ 
//│       ◉ (?e list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?e) is assumed for
//│        - l.-159let wrap x = x :: []
//│                             ^
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?e list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │ 
//│       ◉ (?c list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?c) is assumed for
//│     ▲  - l.-159let wrap x = x :: []
//│     │                   ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?d) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `bool` does not match `_ list`
//│ 
//│         (bool) ---> (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) ---> (?d) ---> (?b) ---> (?c) ~~~> (?c list) ---> (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)  <~~~ (?c) ~~~> (?c list) ---> (?a) ---> (?m) <--- (?a) <--- (?e list)  <~~~ (?e) ~~~> (?e list) ---> (?a) ---> (?m) <--- (?a) <--- (?c list)  <~~~ (?c) <--- (?b) <--- (?d) <--- (?m) <--- (?a) <--- (?c list)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                                    ^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?d) is assumed for
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?c list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       ▼ 
//│       ◉ (?m) is assumed for
//│       ▲  - l.3  let rec m = test (if true then 1 else m)
//│       │                 ^
//│       │  - l.3  let rec m = test (if true then 1 else m)
//│       │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │ 
//│       ◉ (?e list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?e) is assumed for
//│        - l.-159let wrap x = x :: []
//│                             ^
//│        - l.-159let wrap x = x :: []
//│                         ^
//│       ◉ (?e list) comes from
//│       │  - l.-159let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                               ^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ (?a) is assumed for
//│       ▲  - l.1  let test z = if true then wrap z else wrap true
//│       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.1  let test z = if true then wrap z else wrap true
//│       │                                   ^^^^^^
//│       │ 
//│       ◉ (?c list) comes from
//│          - l.-159let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?c) is assumed for
//│     ▲  - l.-159let wrap x = x :: []
//│     │                   ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                        ^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                  ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?d) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                                               ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?c list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?e list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│      - l.-159let wrap x = x :: []
//│                           ^
//│      - l.-159let wrap x = x :: []
//│                       ^
//│     ◉ (?e list) comes from
//│     │  - l.-159let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?a) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?c list) comes from
//│        - l.-159let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?c) is assumed for
//│   ▲  - l.-159let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?c list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?e list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-159let wrap x = x :: []
//│                         ^
//│    - l.-159let wrap x = x :: []
//│                     ^
//│   ◉ (?e list) comes from
//│   │  - l.-159let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?c list) comes from
//│      - l.-159let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-159let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │ 
//│ ◉ (?m) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │ 
//│ ◉ (?c list) comes from
//│    - l.-159let wrap x = x :: []
//│                         ^^^^^^^
//│ test: bool -> list[bool]
//│ m: 'm
//│   where
//│     'm = list['a], bool, int
//│     'a = list['a], bool, int
//│ U max: 34, total: 155
//│ UERR 17 errors
//│ L: 2 [bool ~ list[[α99']], bool <: α99', [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]
//│ L: 2 [list[[α100']] ~ bool, list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]
//│ L: 3 [list[[α99']] ~ bool, list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 2 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]
//│ L: 1 [list[[α99']] ~ int, list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> int]
//│ L: 1 [list[[α100']] ~ int, list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> int]
//│ L: 0 [list[[α99']] ~ int, list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' :> α102', α102' :> int]
//│ L: 2 [bool ~ int, bool <: α99', [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> int]
//│ L: 0 [list[[α100']] ~ int, list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' :> α102', α102' :> int]
//│ L: 3 [int ~ bool, int <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 2 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]
//│ L: 1 [list[[α99']] ~ bool, list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]
//│ L: 3 [bool ~ list[[α100']], bool <: α99', [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 2 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]
//│ L: 2 [list[[α100']] ~ int, list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> int]
//│ L: 2 [list[[α99']] ~ int, list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> int]
//│ L: 1 [int ~ bool, int <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]
//│ L: 3 [int ~ list[[α99']], int <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 2 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]
//│ L: 3 [int ~ list[[α100']], int <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 2 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 1 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 1 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]], [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α99']]]], [α99' - list[[α99']] ~ list[[α100']] - α100', L: 0 [list[[α99']] ~ list[[α100']], list[[α99']] <: α101', α101' <: m97', m97' :> α101', α101' :> list[[α100']]]], α100' :> α98', α98' :> α102', α102' :> m97', m97' :> α101', α101' :> list[[α100']]]
//│ L: 1 [list[[α100']] ~ bool, list[[α100']] <: α101', α101' <: m97', m97' <: α102', α102' <: α98', α98' <: α100', [α100' - list[[α100']] ~ list[[α99']] - α99', L: 0 [list[[α100']] ~ list[[α99']], list[[α100']] <: α101', α101' :> list[[α99']]]], α99' :> bool]


// FIXME implementation exception
let rec digitsOfInt n =
  ((digitsOfInt n) / 10) @ [remainder];;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let ( / ): int -> int -> int
//│ │                                  ^^^
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                    ^^^^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ~~~>  (_ -> _ list) ---> (?digitsOfInt) ---> (_ -> ?a)  ~~~> (?a) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│   ◉ (_ -> _ list) comes from
//│   │  - l.1  let rec digitsOfInt n =
//│   │                             ^^^
//│   │           ((digitsOfInt n) / 10) @ [remainder];;
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt) is assumed for
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│                 ^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │            ^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( / ): int -> int -> int
//│                      ^^^
//│ ╔══[ERROR] identifier not found: remainder
//│ ║  
//│ ║  l.7125:	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                            ^^^^^^^^^
//│ digitsOfInt: 'digitsOfInt
//│   where
//│     'digitsOfInt = 'a -> list[err], 'a -> 'b
//│     'b = list[err], int
//│ U max: 2, total: 11
//│ UERR 2 errors
//│ L: 0 [int ~ list[α107'], int <: list[α107']]
//│ L: 1 [list[α107'] ~ int, [list[α107'] - (α106' -> [list[α107']]) ~ ([α106'] -> α108') - α108', L: 0 [(α106' -> [list[α107']]) ~ ([α106'] -> α108'), (α106' -> [list[α107']]) <: digitsOfInt105', digitsOfInt105' <: ([α106'] -> α108')]], α108' <: int]
